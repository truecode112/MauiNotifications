@page "/"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Amazon.SimpleNotificationService;
@using Amazon.SimpleNotificationService.Model;
@using System.Threading.Tasks;
@using Amazon;
@using Microsoft.Extensions.Configuration;
@inject NotificationService NotificationService
@using Radzen
@using System.Text.Json
@using Microsoft.JSInterop;
@using MauiNotifications.Services.Topics
@using MauiNotifications.Services.Subscriptions

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<div class="container my-4">
    <RadzenTemplateForm TItem="SubscribeForm" Data="@model" Submit="@((SubscribeForm args) => { Submit(args); })">
        <RadzenFieldset Text="Subscribe to topic">
        
            <div class="row mb-4">
                <div class="col-md-4  align-items-center d-flex">
                    <RadzenLabel Text="Email" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox style="display: block;" class="w-100" @bind-Value="@model.Email" Name="Email" Placeholder="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Mobile number" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox style="display: block;" class="w-100" @bind-Value="@model.MobileNumber"  Name="MobileNumber" Placeholder="Mobile number" />
                    <RadzenRequiredValidator Component="MobileNumber" Text="Mobile number is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Topic name" />
                </div>
                <div class="col-md-8">
                    <RadzenDropDown @bind-Value="@model.TopicName" AllowClear="true" Placeholder="Select topic" Data="@topicNames" style="width: 100%;display: block;" TextProperty="" ValueProperty="" Name="TopicName">
                    </RadzenDropDown>
                    <RadzenRequiredValidator Component="TopicName" Text="Topic is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>

            <div class="row">
                <div class="row justify-content-center">
                    <div class="col-md-6 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                        <RadzenButton Class="w-50" ButtonType="ButtonType.Submit" Icon="" Text="Subscribe" />
                    </div>
                </div>
            </div>
        </RadzenFieldset>
    </RadzenTemplateForm>
</div>

@code {

    SubscribeForm model = new SubscribeForm();
    bool success;
    bool popup = false;
    string[] topicNames = null;
    SnsTopicService _topicService = null;
    SubscriptionService _subscrService = null;

    protected override async Task OnInitializedAsync()
    {
        _topicService = new SnsTopicService();
        _subscrService = new SubscriptionService();
        var topicArns = await _topicService.GetAllTopicsNameAsync();
        topicNames = new string[topicArns.Count];
        int index = 0;
        foreach (TopicArn arn in topicArns)
        {
            topicNames[index] = arn.TopicName;
            index++;
        }

        /*var topicService = MauiProgram.Services.GetService<SnsTopicService>();
    */
    }

    public class SubscribeForm
    {
        public string Email { get; set; }

        public string MobileNumber { get; set; }

        public string TopicName { get; set; }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async Task Submit(SubscribeForm arg)
    {
        //
        //ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 4000 });
        try
        {
            var email = model.Email;
            var mobile = model.MobileNumber;        //13153704390
            var emailSubscription = await _subscrService.CreateEmailSubscriptionAsync(model.TopicName, email);
            var mobileSubscription = await _subscrService.CreateSMSSubscriptionAsync(model.TopicName, mobile);
            var successDetail = string.Format("{0} and {1} subscribed to {2} successfully!", email, mobile, model.TopicName);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Subscribe success", Detail = successDetail, Duration = 3000 });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Subscribe failed", Detail = e.Message, Duration = 3000 });
        }
    }

    private void OnValidSubmit(EditContext context)
    {
       
        /*var client = new AmazonSimpleNotificationServiceClient();
        var request = new ListTopicsRequest();
        var response = new ListTopicsResponse();
        do
        {
            response = client.ListTopics(request);

            foreach (var topic in response.Topics)
            {
                Console.WriteLine("Topic: {0}", topic.TopicArn);

                var subs = client.ListSubscriptionsByTopic(
                  new ListSubscriptionsByTopicRequest
                      {
                          TopicArn = topic.TopicArn
                      });

                var ss = subs.Subscriptions;

                if (ss.Any())
                {
                    Console.WriteLine("  Subscriptions:");

                    foreach (var sub in ss)
                    {
                        Console.WriteLine("    {0}", sub.SubscriptionArn);
                    }
                }

                var attrs = client.GetTopicAttributes(
                  new GetTopicAttributesRequest
                      {
                          TopicArn = topic.TopicArn
                      }).Attributes;

                if (attrs.Any())
                {
                    Console.WriteLine("  Attributes:");

                    foreach (var attr in attrs)
                    {
                        Console.WriteLine("    {0} = {1}", attr.Key, attr.Value);
                    }
                }

                Console.WriteLine();
            }

            request.NextToken = response.NextToken;

        } while (!string.IsNullOrEmpty(response.NextToken));*/

        
    }
}
