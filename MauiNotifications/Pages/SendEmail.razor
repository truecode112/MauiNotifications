@page "/sendemail"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Amazon.SimpleNotificationService;
@using Amazon.SimpleNotificationService.Model;
@using System.Threading.Tasks;
@using Amazon;
@using Microsoft.Extensions.Configuration;
@inject NotificationService NotificationService
@using Radzen
@using System.Text.Json
@using Microsoft.JSInterop;
@using MauiNotifications.Services.Topics
@using MauiNotifications.Services.Subscriptions
@using Amazon.SimpleEmail
@using Amazon.SimpleEmail.Model
@using System.Reflection;

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

<div class="container my-4">
    <RadzenTemplateForm TItem="EmailForm" Data="@model" Submit="@((EmailForm args) => { Submit(args); })">
        <RadzenFieldset Text="Send email">

            <div class="row mb-4">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Email" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox style="display: block;" class="w-100" @bind-Value="@model.Email" Name="Email" Placeholder="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Select payload" />
                </div>
                <div class="col-md-8">
                    <RadzenDropDown TValue="string" @bind-value="@model.PayloadType" Data=@payloadTypes style="width: 100%;display: block;" TextProperty="" ValueProperty="" Name="PayloadType">
                    </RadzenDropDown>
                </div>
            </div>

            <div class="row">
                <div class="row justify-content-center">
                    <div class="col-md-6 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                        <RadzenButton Class="w-50" ButtonType="ButtonType.Submit" Icon="" Text="Send" />
                    </div>
                </div>
            </div>
        </RadzenFieldset>
    </RadzenTemplateForm>
</div>

@code {

    EmailForm model = new EmailForm();
    bool success;
    bool popup = false;
    string[] payloadTypes = { "Simple", "Complex" };

    SnsTopicService _topicService = null;
    SubscriptionService _subscrService = null;

    protected override async Task OnInitializedAsync()
    {
        model.PayloadType = payloadTypes[0];
    }

    public class EmailForm
    {
        public string Email { get; set; }

        public string PayloadType { get; set; }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async Task Submit(EmailForm arg)
    {
        IConfiguration config = MauiProgram.Services.GetService<IConfiguration>();
        var settings = config.GetRequiredSection("Settings").Get<Settings.AWSSettings>();

        string payloadName = "";
        if (model.PayloadType.Equals("Simple"))
        {
            payloadName = "MauiNotifications.JSONPayload.SimpleData.json";
        } else
        {
            payloadName = "MauiNotifications.JSONPayload.ComplexData.json";
        }
        using var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(payloadName);

        using (StreamReader reader = new StreamReader(stream))
        {
            string jsonFile = reader.ReadToEnd(); //Make string equal to full file
            using (var client = new AmazonSimpleEmailServiceClient(settings.aws_access_key, settings.aws_secret_key, RegionEndpoint.USEast1))
            {
                var sendRequest = new SendEmailRequest
                    {
                        Source = "no-reply@amazon.com",
                        Destination = new Destination
                        {
                            ToAddresses = new List<string> { model.Email }
                        },
                        Message = new Message
                        {
                            Subject = new Content("Message from Amazon"),
                            Body = new Body
                            {
                                Text = new Content
                                {
                                    Charset = "UTF-8",
                                    Data = jsonFile
                                }
                            }
                        }
                    };

                try
                {
                    Console.WriteLine("Sending email using Amazon SES...");
                    var response = await client.SendEmailAsync(sendRequest);
                    Console.WriteLine("The email was sent successfully.");
                    var successDetail = string.Format("Sent email to {0}", model.Email);
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Send success", Detail = successDetail, Duration = 3000 });
                }
                catch (Exception ex)
                {
                    Console.WriteLine("The email was not sent.");
                    Console.WriteLine("Error message: " + ex.Message);
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Send email failed", Detail = ex.Message, Duration = 3000 });

                }
            }
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        
    }
}

